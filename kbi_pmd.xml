<?xml version="1.0"?>

<ruleset name="All Java Rules" 
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">
    <description>Every Java Rule in PMD</description>

    <!-- Lexer test cases - wrong encoding, illegal characters, ... -->
    <exclude-pattern>.*/ant/java/EncodingTestClass.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/cpd/badandgood/BadFile.java</exclude-pattern>

    <!-- the following files produce parsing errors with java 9, as they use identifiers, that
         are now reserved keywords and are forbidden to be used as identifiers.
    -->
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/assert_test5.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/assert_test5_a.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/assert_test7.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/jdk14_enum.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/jdk9_invalid_identifier.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/java10/LocalVariableTypeInference_varAsAnnotationName.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/java10/LocalVariableTypeInference_varAsEnumName.java</exclude-pattern>
    <exclude-pattern>.*/net/sourceforge/pmd/lang/java/ast/jdkversiontests/java10/LocalVariableTypeInference_varAsTypeIdentifier.java</exclude-pattern>

    <!-- 一般的に受け入れられているベストプラクティスを強制するルール -->
    <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html -->
    <rule ref="category/java/bestpractices.xml" >
        <!-- 抽象クラスの定義が正しいがチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#abstractclasswithoutabstractmethod -->
        <exclude name="AbstractClassWithoutAbstractMethod" />
        <!-- アクセサ関連のチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#accessorclassgeneration -->
        <exclude name="AccessorClassGeneration" />
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#accessormethodgeneration -->
        <exclude name="AccessorMethodGeneration" />
        <!-- 引数の配列を直接編集せずコピーして使用しているかチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#arrayisstoreddirectly -->
        <exclude name="ArrayIsStoredDirectly" />
        <!-- 例外発生時にe.printStackTrace()を避けてロガーで出力するようにしているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#avoidprintstacktrace -->
        <exclude name="AvoidPrintStackTrace" />
        <!-- 入力パラメータに値を再割り当てしていないかチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#avoidreassigningparameters -->
        <exclude name="AvoidReassigningParameters" />
        <!-- StringBuffers/StringBuildersはかなり大きくなる可能性があるため、寿命の長いオブジェクト内に保持すると、メモリリークの原因となる可能性があります -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#avoidstringbufferfield -->
        <exclude name="AvoidStringBufferField" />
        <!-- クラス内でハードコードされたIPアドレスを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#avoidusinghardcodedip -->
        <exclude name="AvoidUsingHardCodedIP" />
        <!-- ResultSetのナビゲーションメソッドの戻り値（next、previous、first、last）を必ず確認してください。 戻り値が「false」の場合は、適切に処理する必要があります -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#checkresultset -->
        <exclude name="CheckResultSet" />
        <!-- インターフェース内で定数を定義していないか（定数はクラスまたは列挙型に配置する方が適切な実装） -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#constantsininterface -->
        <exclude name="ConstantsInInterface" />
        <!-- 慣例により、defaultのラベルはswitchステートメントの最後である必要がある -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#defaultlabelnotlastinswitchstmt -->
        <exclude name="DefaultLabelNotLastInSwitchStmt" />
        <!-- foreach構文に安全に置き換えることができるループを定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#forloopcanbeforeach -->
        <exclude name="ForLoopCanBeForeach" />
        <!-- ログレベルが実際に有効になっているかどうかをチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#guardlogstatement -->
        <exclude name="GuardLogStatement" />
        <!-- JUnit 3では、テストスイートはsuiteメソッドで示されます。JUnit4では、スイートは@RunWith（Suite.class）アノテーションによって示されます -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#junit4suitesshouldusesuiteannotation -->
        <exclude name="JUnit4SuitesShouldUseSuiteAnnotation" />
        <!-- tearDownの使用方法がJUnitのバージョンに合っているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#junit4testshoulduseafterannotation -->
        <exclude name="JUnit4TestShouldUseAfterAnnotation" />
        <!-- setUpの使用方法がJUnitのバージョンに合っているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#junit4testshouldusebeforeannotation -->
        <exclude name="JUnit4TestShouldUseBeforeAnnotation" />
        <!-- testアノテーションの使用方法がJUnitのバージョンに合っているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#junit4testshouldusetestannotation -->
        <exclude name="JUnit4TestShouldUseTestAnnotation" />
        <!-- assertEqualsの使用時に情報メッセージを含めているか（第３引数まで使用しているか） -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#junitassertionsshouldincludemessage -->
        <exclude name="JUnitAssertionsShouldIncludeMessage" />
        <!-- 単体テストに含まれるアサーションが多すぎないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#junittestcontainstoomanyasserts -->
        <exclude name="JUnitTestContainsTooManyAsserts" />
        <!-- JUnitテストには少なくとも1つのアサーションが含まれているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#junittestsshouldincludeassert -->
        <exclude name="JUnitTestsShouldIncludeAssert" />
        <!-- JUnit4では、@ Test（expected）アノテーションを使用して、例外をスローするテストを指定します -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#junituseexpected -->
        <exclude name="JUnitUseExpected" />
        <!-- オブジェクト参照として実装型（すなわち、HashSet）を使用すると、要件の変化に応じて将来代替実装を使用できるようになります -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#loosecoupling -->
        <exclude name="LooseCoupling" />
        <!-- 内部配列を呼び出し元に公開すると、要素を所有するオブジェクトの外部で要素を削除または置換できるため、オブジェクトのカプセル化に違反します -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#methodreturnsinternalarray -->
        <exclude name="MethodReturnsInternalArray" />
        <!-- @Overrideを使用してオーバーライドされたメソッドに注釈を付けると、そのメソッドが実際にオーバーライドすることがコンパイル時に保証されます -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#missingoverride -->
        <exclude name="MissingOverride" />
        <!-- 1行に同じ型の複数の変数宣言を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#onedeclarationperline -->
        <exclude name="OneDeclarationPerLine" />
        <!-- 2番目の引数がnullの場合、NullPointerExceptionsは避けることができ、それらは単にfalseを返します -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#positionliteralsfirstincaseinsensitivecomparisons -->
        <exclude name="PositionLiteralsFirstInCaseInsensitiveComparisons" />
        <!-- 2番目の引数がnullの場合、NullPointerExceptionsは避けることができ、それらは単にfalseを返します -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#positionliteralsfirstincomparisons -->
        <exclude name="PositionLiteralsFirstInComparisons" />
        <!-- 元の例外を新しい例外に渡さずにcatchブロックから新しい例外をスローしていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#preservestacktrace -->
        <exclude name="PreserveStackTrace" />
        <!-- java.util.Iteratorに置き換えることが出来る列挙型を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#replaceenumerationwithiterator -->
        <exclude name="ReplaceEnumerationWithIterator" />
        <!-- スレッドセーフを必要としない場合は、Hashtableではなくjava.util.Mapを使用すること -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#replacehashtablewithmap -->
        <exclude name="ReplaceHashtableWithMap" />
        <!-- スレッドセーフを必要としない場合はVectorではなくjava.util.ArrayListを使用しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#replacevectorwithlist -->
        <exclude name="ReplaceVectorWithList" />
        <!-- switchステートメントにdefaultの定義忘れがないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault -->
        <exclude name="SwitchStmtsShouldHaveDefault" />
        <!-- System.out.printlnの代わりにロガーを使用しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#systemprintln -->
        <exclude name="SystemPrintln" />
        <!-- メソッド内で使用しない引数を渡していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#unusedformalparameter -->
        <exclude name="UnusedFormalParameter" />
        <!-- 未使用のimport文を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#unusedimports -->
        <exclude name="UnusedImports" />
        <!-- 未使用ローカル変数が宣言されていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#unusedlocalvariable -->
        <exclude name="UnusedLocalVariable" />
        <!-- 未使用のプライベートフィールドが宣言されていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#unusedprivatefield -->
        <exclude name="UnusedPrivateField" />
        <!-- 未使用のメソッドが定義されていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#unusedprivatemethod -->
        <exclude name="UnusedPrivateMethod" />
        <!-- assertの使用方法が正しいか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#useassertequalsinsteadofasserttrue -->
        <exclude name="UseAssertEqualsInsteadOfAssertTrue" />
        <!-- assertの使用方法が正しいか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#useassertnullinsteadofasserttrue -->
        <exclude name="UseAssertNullInsteadOfAssertTrue" />
        <!-- assertの使用方法が正しいか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#useassertsameinsteadofasserttrue -->
        <exclude name="UseAssertSameInsteadOfAssertTrue" />
        <!-- assertの使用方法が正しいか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#useasserttrueinsteadofassertequals -->
        <exclude name="UseAssertTrueInsteadOfAssertEquals" />
        <!-- CollectionのisEmptyメソッドの使用方法が正しいか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#usecollectionisempty -->
        <exclude name="UseCollectionIsEmpty" />
        <!-- varargsパラメータ宣言が適切に使用されているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_bestpractices.html#usevarargs -->
        <exclude name="UseVarargs" />
    </rule>

    <!-- 特定のコーディングスタイルを強制するルール -->
    <!-- ここはCheckStyleに任せても良いのではないか -->
    <rule ref="category/java/codestyle.xml" >
        <!-- Deprecated -->
        <!--<exclude name="AbstractNaming" />-->

        <!-- 各非静的クラスは少なくとも1つのコンストラクタを宣言しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#atleastoneconstructor -->
        <exclude name="AtLeastOneConstructor" />
        <!-- 変数/メソッド/クラス/インターフェース名にドル記号を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#avoiddollarsigns -->
        <exclude name="AvoidDollarSigns" />
        <!-- ローカル変数にfinalを付与しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#avoidfinallocalvariable -->
        <exclude name="AvoidFinalLocalVariable" />

        <!-- Deprecated -->
        <!--<exclude name="AvoidPrefixingMethodParameters" />-->

        <!-- final class内でprotectedフィールドを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#avoidprotectedfieldinfinalclass -->
        <exclude name="AvoidProtectedFieldInFinalClass" />
        <!-- final class内でprotectedメソッドを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#avoidprotectedmethodinfinalclassnotextending -->
        <exclude name="AvoidProtectedMethodInFinalClassNotExtending" />
        <!-- Java Native Interface（JNI）呼び出しに不必要に依存すると、アプリケーションの移植性が直接低下し、保守の負担が増大します -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#avoidusingnativecode -->
        <exclude name="AvoidUsingNativeCode" />
        <!-- ブール値の結果を返すメソッド名が適切であるか (is、has、can、will)-->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#booleangetmethodname -->
        <exclude name="BooleanGetMethodName" />
        <!-- コンストラクタ内でsuper()を適切に呼び出しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#callsuperinconstructor -->
        <exclude name="CallSuperInConstructor" />
        <!-- クラス名が命名規則に従っているかチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#classnamingconventions -->
        <exclude name="ClassNamingConventions" />
        <!-- デフォルトのアクセス修飾子を持たせる場合、コメントで明示しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#commentdefaultaccessmodifier -->
        <exclude name="CommentDefaultAccessModifier" />
        <!-- else節を含むif式の中での否定は避けているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#confusingternary -->
        <exclude name="ConfusingTernary" />
        <!-- 制御ステートメントに中括弧のポリシーを適用しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#controlstatementbraces -->
        <exclude name="ControlStatementBraces" />
        <!-- デフォルトパッケージのプライベートレベルを誤って使用する代わりに、明示的なスコープを使用しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#defaultpackage -->
        <exclude name="DefaultPackage" />
        <!-- パッケージ「java.lang」からインポートしていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#dontimportjavalang -->
        <exclude name="DontImportJavaLang" />
        <!-- インポート文の重複定義がないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#duplicateimports -->
        <exclude name="DuplicateImports" />
        <!-- 抽象クラス内の空のメソッドまたは自動生成されたメソッドはabstractとしてタグ付けする必要がある -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#emptymethodinabstractclassshouldbeabstract -->
        <exclude name="EmptyMethodInAbstractClassShouldBeAbstract" />
        <!-- Objectを明示的にextendsしていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#extendsobject -->
        <exclude name="ExtendsObject" />
        <!-- フィールドは、メソッド宣言、コンストラクタ、初期化子、または内部クラスの前に、クラスの先頭で宣言されているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass -->
        <exclude name="FieldDeclarationsShouldBeAtStartOfClass" />
        <!-- フィールド宣言のための構成可能な命名規則をチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#fieldnamingconventions -->
        <exclude name="FieldNamingConventions" />
        <!-- whileループに簡略化出来るforループの実装がないかチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#forloopshouldbewhileloop -->
        <exclude name="ForLoopShouldBeWhileLoop" />

        <!-- Deprecated -->
        <!--<exclude name="ForLoopsMustUseBraces" />-->

        <!-- メソッドとラムダの仮パラメータに対する設定可能な命名規則に従っているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#formalparameternamingconventions -->
        <exclude name="FormalParameterNamingConventions" />
        <!-- 総称値を参照するための名前は単一の大文字に制限しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#genericsnaming -->
        <exclude name="GenericsNaming" />
        <!-- try-catchの内容に関するチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#identicalcatchbranches -->
        <exclude name="IdenticalCatchBranches" />

        <!-- Deprecated -->
        <!--<exclude name="IfElseStmtsMustUseBraces" />-->

        <!-- Deprecated -->
        <!--<exclude name="IfStmtsMustUseBraces" />-->

        <!-- この規則は言語命名アンチパターンを見つけます -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#linguisticnaming -->
        <exclude name="LinguisticNaming" />
        <!-- セッションEJBのローカルホームインタフェースの末尾には「LocalHome」を付ける必要がある -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#localhomenamingconvention -->
        <exclude name="LocalHomeNamingConvention" />
        <!-- セッションEJBのローカルインタフェースには、「Local」という接尾辞を付ける必要がある -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#localinterfacesessionnamingconvention -->
        <exclude name="LocalInterfaceSessionNamingConvention" />
        <!-- 一度だけ割り当てられたローカル変数をfinalとして宣言しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#localvariablecouldbefinal -->
        <exclude name="LocalVariableCouldBeFinal" />
        <!-- ローカル変数宣言およびその他のローカルスコープの変数に対する構成可能な命名規則をチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#localvariablenamingconventions -->
        <exclude name="LocalVariableNamingConventions" />
        <!-- 長すぎるフィールド、仮引数、またはローカル変数名を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#longvariable -->
        <exclude name="LongVariable" />
        <!-- EJB仕様では、MessageDrivenBeanまたはSessionBeanの後に「Bean」を付ける必要があると規定されています -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#mdbandsessionbeannamingconvention -->
        <exclude name="MDBAndSessionBeanNamingConvention" />
        <!-- メソッド内で決して再割り当てされないメソッド引数をfinalで宣言しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#methodargumentcouldbefinal -->
        <exclude name="MethodArgumentCouldBeFinal" />
        <!-- メソッド宣言の設定可能な命名規則をチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#methodnamingconventions -->
        <exclude name="MethodNamingConventions" />

        <!-- Deprecated -->
        <!--<exclude name="MIsLeadingVariableName" />-->

        <!-- クラスまたはインタフェースにパッケージ定義をしているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#nopackage -->
        <exclude name="NoPackage" />
        <!-- メソッド内にreturnが複数存在しないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#onlyonereturn -->
        <exclude name="OnlyOneReturn" />
        <!-- パッケージ定義に大文字が含まれていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#packagecase -->
        <exclude name="PackageCase" />
        <!-- 使用される前に定義されている変数をチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#prematuredeclaration -->
        <exclude name="PrematureDeclaration" />
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#remoteinterfacenamingconvention -->
        <exclude name="RemoteInterfaceNamingConvention" />
        <!-- セッションEJBのリモートインタフェースには接尾辞を付けないでください -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#remotesessioninterfacenamingconvention -->
        <exclude name="RemoteSessionInterfaceNamingConvention" />
        <!-- 短すぎるクラス名を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#shortclassname -->
        <exclude name="ShortClassName" />
        <!-- 短すぎるメソッド名を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#shortmethodname -->
        <exclude name="ShortMethodName" />
        <!-- 短すぎるフィールド、ローカル変数、またはパラメータ名を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#shortvariable -->
        <exclude name="ShortVariable" />

        <!-- Deprecated -->
        <!--<exclude name="SuspiciousConstantFieldName" />-->

        <!-- 静的インポート機能を使いすぎていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#toomanystaticimports -->
        <exclude name="TooManyStaticImports" />
        <!-- 注釈が唯一の要素である場合は、注釈に値を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#unnecessaryannotationvalueelement -->
        <exclude name="UnnecessaryAnnotationValueElement" />
        <!-- 不要なコンストラクタを定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#unnecessaryconstructor -->
        <exclude name="UnnecessaryConstructor" />
        <!-- importステートメントでカバーされている完全修飾名を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname -->
        <exclude name="UnnecessaryFullyQualifiedName" />
        <!-- 不要なローカル変数を定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#unnecessarylocalbeforereturn -->
        <exclude name="UnnecessaryLocalBeforeReturn" />
        <!-- 不要な修飾子を宣言していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#unnecessarymodifier -->
        <exclude name="UnnecessaryModifier" />
        <!-- 不要なreturnステートメントを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#unnecessaryreturn -->
        <exclude name="UnnecessaryReturn" />
        <!-- 無駄なカッコ「()」を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#uselessparentheses -->
        <exclude name="UselessParentheses" />
        <!-- thisの使用方法が適切か -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_codestyle.html#uselessqualifiedthis -->
        <exclude name="UselessQualifiedThis" />

        <!-- Deprecated -->
        <!--<exclude name="VariableNamingConventions" />-->

        <!-- Deprecated -->
        <!--<exclude name="WhileLoopsMustUseBraces" />-->
    </rule>

    <!-- 設計上の問題をチェックするルール -->
    <!-- https://pmd.github.io/latest/pmd_rules_java_design.html -->
    <rule ref="category/java/design.xml" >
        <!-- 抽象クラスがメソッドを提供しない場合、インスタンス化されることを意図していない単純なデータコンテナとして機能している可能性がある -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#abstractclasswithoutanymethod -->
        <exclude name="AbstractClassWithoutAnyMethod" />
        <!-- NullPointerException、RuntimeException、try-catchブロック内のExceptionなどの一般的な例外をキャッチしていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#avoidcatchinggenericexception -->
        <exclude name="AvoidCatchingGenericException" />
        <!-- 深くネストされたif-thenステートメントは、読みにくく、エラーが発生しやすいため、作成しないこと -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#avoiddeeplynestedifstmts -->
        <exclude name="AvoidDeeplyNestedIfStmts" />
        <!-- 単にキャッチされた例外を再スローするキャッチブロックは、コードサイズと実行時の複雑さを増すだけなので使用しない -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#avoidrethrowingexception -->
        <exclude name="AvoidRethrowingException" />
        <!-- 同じ型の例外を単に再スローするCatchブロックは、コードサイズと実行時の複雑さを増すだけでなので使用しない -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#avoidthrowingnewinstanceofsameexception -->
        <exclude name="AvoidThrowingNewInstanceOfSameException" />
        <!-- 手動でNullPointerExceptionをスローしないこと -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#avoidthrowingnullpointerexception -->
        <exclude name="AvoidThrowingNullPointerException" />
        <!-- 生のRuntimeException、Throwable、Exceptionをスローするのではなく、代わりにサブクラス化された例外クラスを使用しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes -->
        <exclude name="AvoidThrowingRawExceptionTypes" />
        <!-- プライベートコンストラクタだけを持つクラスは、プライベートコンストラクタが内部クラスによって呼び出されない限り、finalになる -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal -->
        <exclude name="ClassWithOnlyPrivateConstructorsShouldBeFinal" />
        <!-- ifステートメントの使用方法が適切であるか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#collapsibleifstatements -->
        <exclude name="CollapsibleIfStatements" />
        <!-- オブジェクト内の固有の属性、ローカル変数、および戻り型の数を数えます。 指定されたしきい値より高い数値は、高度な結合を示している可能性があります -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#couplingbetweenobjects -->
        <exclude name="CouplingBetweenObjects" />
        <!-- サイクロマティック複雑度が閾値を超えていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#cyclomaticcomplexity -->
        <exclude name="CyclomaticComplexity" />
        <!-- データクラスの設計に問題がないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#dataclass -->
        <exclude name="DataClass" />
        <!-- Errorクラスを拡張して使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#donotextendjavalangerror -->
        <exclude name="DoNotExtendJavaLangError" />
        <!-- フロー制御の形式として例外を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#exceptionasflowcontrol -->
        <exclude name="ExceptionAsFlowControl" />
        <!-- クラスファイルの行数が多すぎないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#excessiveclasslength -->
        <exclude name="ExcessiveClassLength" />
        <!-- インポートの数をカウントし、その数がユーザー指定のしきい値を超えると違反を報告します -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#excessiveimports -->
        <exclude name="ExcessiveImports" />
        <!-- メソッドの行数が多すぎないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#excessivemethodlength -->
        <exclude name="ExcessiveMethodLength" />
        <!-- メソッドの引数が多すぎないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#excessiveparameterlist -->
        <exclude name="ExcessiveParameterList" />
        <!-- 役割が大きすぎるクラスになっていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#excessivepubliccount -->
        <exclude name="ExcessivePublicCount" />
        <!-- finalフィールドの定義が適切か -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#finalfieldcouldbestatic -->
        <exclude name="FinalFieldCouldBeStatic" />
        <!-- クラスが神の領域に達していないか（ネタ） -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#godclass -->
        <exclude name="GodClass" />
        <!-- イミュータブルなフィールドの定義方法のチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#immutablefield -->
        <exclude name="ImmutableField" />
        <!-- デメテルの法則に違反しているかチェック（直接の友達とだけ話すこと） -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#lawofdemeter -->
        <exclude name="LawOfDemeter" />
        <!-- 論理補完演算子で式全体を否定するのではなく、反対演算子を使用してください -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#logicinversion -->
        <exclude name="LogicInversion" />
        <!-- パッケージ階層の外側で構成済みのパッケージ階層からクラスを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#loosepackagecoupling -->
        <exclude name="LoosePackageCoupling" />

        <!-- Deprecated -->
        <!--<exclude name="ModifiedCyclomaticComplexity" />-->

        <!-- Deprecated -->
        <!--<exclude name="NcssConstructorCount" />-->

        <!-- クラスとメソッドの行数が閾値を超えていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#ncsscount -->
        <exclude name="NcssCount" />

        <!-- Deprecated -->
        <!--<exclude name="NcssMethodCount" />-->

        <!-- Deprecated -->
        <!--<exclude name="NcssTypeCount" />-->

        <!-- NPath複雑度が閾値を超えていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#npathcomplexity -->
        <exclude name="NPathComplexity" />
        <!-- メソッドからどの例外がスローされる可能性があるのかが明確になっているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#signaturedeclarethrowsexception -->
        <exclude name="SignatureDeclareThrowsException" />
        <!-- 三項演算子の使用方法が適切か -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#simplifiedternary -->
        <exclude name="SimplifiedTernary" />
        <!-- assertの記述方法がシンプルであるか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#simplifybooleanassertion -->
        <exclude name="SimplifyBooleanAssertion" />
        <!-- boolean型で不必要な比較を行っていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#simplifybooleanexpressions -->
        <exclude name="SimplifyBooleanExpressions" />
        <!-- return時の真偽値の判定方法が適切か -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#simplifybooleanreturns -->
        <exclude name="SimplifyBooleanReturns" />
        <!-- instanceofを使用する前にnullチェックを行っていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#simplifyconditional -->
        <exclude name="SimplifyConditional" />
        <!-- スコープが単一のメソッドに限定されているフィールドが存在しないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#singularfield -->
        <exclude name="SingularField" />

        <!-- Deprecated -->
        <!--<exclude name="StdCyclomaticComplexity" />-->

        <!-- switchの分岐が多すぎないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#switchdensity -->
        <exclude name="SwitchDensity" />
        <!-- クラスにフィールドが多すぎないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#toomanyfields -->
        <exclude name="TooManyFields" />
        <!-- クラスにメソッドが多すぎないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#toomanymethods -->
        <exclude name="TooManyMethods" />
        <!-- オーバーライドしたメソッドがスーパークラスで定義されているのと同じメソッドを呼び出すだけになっていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#uselessoverridingmethod -->
        <exclude name="UselessOverridingMethod" />
        <!-- パブリックメソッドの引数の数が適切か -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#useobjectforclearerapi -->
        <exclude name="UseObjectForClearerAPI" />
        <!-- 静的メソッドしかないクラスの場合は、それらをユーティリティクラスにすることを検討してください -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_design.html#useutilityclass -->
        <exclude name="UseUtilityClass" />
    </rule>

    <!-- コードコメントに関するルール -->
    <!-- ここはCheckStyleに任せても良いのではないか -->
    <!-- https://pmd.github.io/latest/pmd_rules_java_documentation.html -->
    <rule ref="category/java/documentation.xml" >
        <!-- コメントのルールに関するチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_documentation.html#commentcontent -->
        <exclude name="CommentContent" />
        <!-- 特定の言語要素に対してコメントが必要かどうか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_documentation.html#commentrequired -->
        <exclude name="CommentRequired" />
        <!-- コメントのサイズが適切か -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_documentation.html#commentsize -->
        <exclude name="CommentSize" />
        <!-- 空のコンストラクタを明示的にコメントすることで、意図的な（コメント付きの）空のコンストラクタと意図的でない空のコンストラクタを区別するのが簡単になる -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_documentation.html#uncommentedemptyconstructor -->
        <exclude name="UncommentedEmptyConstructor" />
        <!-- 空のメソッド本体を明示的にコメントすることで、意図的な（コメント付きの）空のメソッドと意図的でない空のメソッドを区別するのが簡単になる -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_documentation.html#uncommentedemptymethodbody -->
        <exclude name="UncommentedEmptyMethodBody" />
    </rule>

    <!-- バグの可能性があるコードをチェックするルール -->
    <!-- ランタイムエラーが発生する可能性があるコードをチェックするルール -->
    <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html -->
    <rule ref="category/java/errorprone.xml" >
        <!-- オペランドでの代入をしていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#assignmentinoperand -->
        <exclude name="AssignmentInOperand" />
        <!-- staticフィールドの使用方法が適切か -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#assignmenttononfinalstatic -->
        <exclude name="AssignmentToNonFinalStatic" />
        <!-- カプセル化の原則に違反するコードがないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidaccessibilityalteration -->
        <exclude name="AvoidAccessibilityAlteration" />
        <!-- assertを変数名に使用していないか（assertは予約語）-->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidassertasidentifier -->
        <exclude name="AvoidAssertAsIdentifier" />
        <!-- ループ処理の最後で分岐文を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidbranchingstatementaslastinloop -->
        <exclude name="AvoidBranchingStatementAsLastInLoop" />
        <!-- Object.finalizeを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidcallingfinalize -->
        <exclude name="AvoidCallingFinalize" />
        <!-- NullPointerExceptionをスローしていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidcatchingnpe -->
        <exclude name="AvoidCatchingNPE" />
        <!-- Throwableをcatchするようなプログラムを書いていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidcatchingthrowable -->
        <exclude name="AvoidCatchingThrowable" />
        <!-- BigDecimalのコンストラクタが正しく使用されているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoiddecimalliteralsinbigdecimalconstructor -->
        <exclude name="AvoidDecimalLiteralsInBigDecimalConstructor" />
        <!-- 重複する文字列リテラルを含むコードは、通常、文字列を定数フィールドとして宣言することによって改善できます -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidduplicateliterals -->
        <exclude name="AvoidDuplicateLiterals" />
        <!-- enumを変数名に使用していないか（assertは予約語）-->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidenumasidentifier -->
        <exclude name="AvoidEnumAsIdentifier" />
        <!-- メソッド名と同じ名前のフィールド名を定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname -->
        <exclude name="AvoidFieldNameMatchingMethodName" />
        <!-- クラス名と同じ名前のフィールド名を定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename -->
        <exclude name="AvoidFieldNameMatchingTypeName" />
        <!-- 捕捉された各例外タイプは、それぞれ独自のcatch句で処理されるべきです -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause -->
        <exclude name="AvoidInstanceofChecksInCatchClause" />
        <!-- 条件付きステートメントでハードコーディングされたリテラルを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidliteralsinifcondition -->
        <exclude name="AvoidLiteralsInIfCondition" />
        <!-- エラー情報を使用せずに例外に対してアクセサを呼び出すcatchブロック内のステートメントは、コードサイズを増やすだけ -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidlosingexceptioninformation -->
        <exclude name="AvoidLosingExceptionInformation" />
        <!-- 複数の単項演算子を同時に使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidmultipleunaryoperators -->
        <exclude name="AvoidMultipleUnaryOperators" />
        <!-- ゼロで始まる整数リテラルを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#avoidusingoctalvalues -->
        <exclude name="AvoidUsingOctalValues" />
        <!-- Double.NaNとの比較を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#badcomparison -->
        <exclude name="BadComparison" />
        <!-- クラスがBeanの場合、またはBeanから直接または間接的に参照されている場合は、直列化可能である必要があります -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#beanmembersshouldserialize -->
        <exclude name="BeanMembersShouldSerialize" />
        <!-- Nullチェックが適切に行われているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#brokennullcheck -->
        <exclude name="BrokenNullCheck" />
        <!-- メソッドの開始時にsuperが呼ばれるべき場所のチェック-->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#callsuperfirst -->
        <exclude name="CallSuperFirst" />
        <!-- メソッドの終わりにsuperが呼ばれるべき場所のチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#callsuperlast -->
        <exclude name="CallSuperLast" />
        <!-- skipのチェックが適切に行われているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#checkskipresult -->
        <exclude name="CheckSkipResult" />
        <!-- Collectionから特定のクラスの配列を派生させるときは、toArrayメソッドのパラメータと同じクラスの配列を指定する必要がある -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#classcastexceptionwithtoarray -->
        <exclude name="ClassCastExceptionWithToArray" />
        <!-- Cloneableインタフェースを実装するクラスはObject.cloneをパブリックメソッドでオーバーライドする必要がある -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#clonemethodmustbepublic -->
        <exclude name="CloneMethodMustBePublic" />
        <!-- cloneメソッドが適切に実装されているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#clonemethodmustimplementcloneable -->
        <exclude name="CloneMethodMustImplementCloneable" />
        <!-- クラスがcloneableを実装している場合、cloneメソッドの戻り値の型はクラス名となっているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname -->
        <exclude name="CloneMethodReturnTypeMustMatchClassName" />
        <!-- cloneメソッドはCloneNotSupportedExceptionスローする -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#clonethrowsclonenotsupportedexception -->
        <exclude name="CloneThrowsCloneNotSupportedException" />
        <!-- リソース（Connection、Statement、およびResultSetオブジェクトなど）は、使用後にクローズする必要がある -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#closeresource -->
        <exclude name="CloseResource" />
        <!-- オブジェクト参照を比較するにはequals（）を使用してください。==と比較しないでください -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#compareobjectswithequals -->
        <exclude name="CompareObjectsWithEquals" />
        <!-- 構築中にオーバーライド可能なメソッドを呼び出していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod -->
        <exclude name="ConstructorCallsOverridableMethod" />
        <!-- データフロー分析は、データフロー上の異なるパス上のローカル定義、未定義変数、および変数への参照を追跡します -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#dataflowanomalyanalysis -->
        <exclude name="DataflowAnomalyAnalysis" />
        <!-- System.gc()、Runtime.getRuntime()、gc()、およびSystem.runFinalization()の呼び出しを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#donotcallgarbagecollectionexplicitly -->
        <exclude name="DoNotCallGarbageCollectionExplicitly" />
        <!-- WebアプリケーションでSystem.exitを呼び出していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#donotcallsystemexit -->
        <exclude name="DoNotCallSystemExit" />
        <!-- Throwableの代わりにExceptionまたはRuntimeExceptionを拡張しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#donotextendjavalangthrowable -->
        <exclude name="DoNotExtendJavaLangThrowable" />
        <!-- /sdcardの代わりにEnvironment.getExternalStorageDirectory()を使用してください -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#donothardcodesdcard -->
        <exclude name="DoNotHardCodeSDCard" />
        <!-- finallyブロック内で例外をスローしていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally -->
        <exclude name="DoNotThrowExceptionInFinally" />
        <!--「sun.*」パッケージからは何もインポートしないでください-->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#dontimportsun -->
        <exclude name="DontImportSun" />
        <!-- ループインデックスに浮動小数点を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#dontusefloattypeforloopindices -->
        <exclude name="DontUseFloatTypeForLoopIndices" />
        <!-- Empty Catch Blockが存在しないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#emptycatchblock -->
        <exclude name="EmptyCatchBlock" />
        <!-- 空のfinalizeメソッドを定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#emptyfinalizer -->
        <exclude name="EmptyFinalizer" />
        <!-- 空のfinallyブロックを定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#emptyfinallyblock -->
        <exclude name="EmptyFinallyBlock" />
        <!-- 空のIf文を定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#emptyifstmt -->
        <exclude name="EmptyIfStmt" />
        <!-- 空のイニシャライザを定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#emptyinitializer -->
        <exclude name="EmptyInitializer" />
        <!-- 空のブロックステートメントを定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#emptystatementblock -->
        <exclude name="EmptyStatementBlock" />
        <!-- 空の文(ゼミコロン「;」のみ)を定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#emptystatementnotinloop -->
        <exclude name="EmptyStatementNotInLoop" />
        <!-- 空のswitchステートメントを定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#emptyswitchstatements -->
        <exclude name="EmptySwitchStatements" />
        <!-- 空の同期ブロックを定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#emptysynchronizedblock -->
        <exclude name="EmptySynchronizedBlock" />
        <!-- 空のtryブロックを定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#emptytryblock -->
        <exclude name="EmptyTryBlock" />
        <!-- 空のWhileステートメントを定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#emptywhilestmt -->
        <exclude name="EmptyWhileStmt" />
        <!-- nullのテストでequalsメソッドを称していないか（代わりに==を使用する）-->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#equalsnull -->
        <exclude name="EqualsNull" />
        <!-- finalizeの実装が正しく行われているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#finalizedoesnotcallsuperfinalize -->
        <exclude name="FinalizeDoesNotCallSuperFinalize" />
        <!-- finalize()が実装されている場合、super.finalize()を呼び出すだけでなく、何かをするべき -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#finalizeonlycallssuperfinalize -->
        <exclude name="FinalizeOnlyCallsSuperFinalize" />
        <!-- finalizeという名前のメソッドはパラメータを持つべきではない -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#finalizeoverloaded -->
        <exclude name="FinalizeOverloaded" />
        <!-- finalizeメソッドをオーバーライドするとき、新しいメソッドはprotectedとして設定されるべきです -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#finalizeshouldbeprotected -->
        <exclude name="FinalizeShouldBeProtected" />
        <!-- 意味のない演算が行われていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#idempotentoperations -->
        <exclude name="IdempotentOperations" />
        <!-- 同じパッケージにある型をインポートしていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#importfromsamepackage -->
        <exclude name="ImportFromSamePackage" />
        <!-- getClassを呼び出すためだけにオブジェクトをインスタンス化していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#instantiationtogetclass -->
        <exclude name="InstantiationToGetClass" />
        <!-- forループの問題をチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#invalidslf4jmessageformat -->
        <exclude name="InvalidSlf4jMessageFormat" />
        <!-- 複雑なループのインクリメンターを避けているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#jumbledincrementer -->
        <exclude name="JumbledIncrementer" />
        <!-- JUnit関連メソッドのスペルミスがないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#junitspelling -->
        <exclude name="JUnitSpelling" />
        <!-- JUnitテストのsuiteメソッドはpublicとstaticの両方である必要がある -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#junitstaticsuite -->
        <exclude name="JUnitStaticSuite" />
        <!-- Loggerをstatic finalで宣言しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#loggerisnotstaticfinal -->
        <exclude name="LoggerIsNotStaticFinal" />
        <!-- 非コンストラクター・メソッドは、それを包含するクラスと同じ名前にしていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#methodwithsamenameasenclosingclass -->
        <exclude name="MethodWithSameNameAsEnclosingClass" />
        <!-- 見当違いのnullチェックを行っていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#misplacednullcheck -->
        <exclude name="MisplacedNullCheck" />
        <!--　各caseオプションに対するbreakまたはreturnステートメントが定義されているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#missingbreakinswitch -->
        <exclude name="MissingBreakInSwitch" />
        <!-- Serializable可能なクラスにserialVersionUIDフィールドを定義しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#missingserialversionuid -->
        <exclude name="MissingSerialVersionUID" />
        <!-- プライベートコンストラクタを持ち、静的メソッドやフィールドを持たないクラスを定義していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#missingstaticmethodinnoninstantiatableclass -->
        <exclude name="MissingStaticMethodInNonInstantiatableClass" />
        <!-- 通常、各クラスで使用されるロガーは1つだけです -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#morethanonelogger -->
        <exclude name="MoreThanOneLogger" />
        <!-- switchステートメントにcase以外のラベルが存在しないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#noncaselabelinswitchstatement -->
        <exclude name="NonCaseLabelInSwitchStatement" />
        <!-- 非静的イニシャライザブロックを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#nonstaticinitializer -->
        <exclude name="NonStaticInitializer" />
        <!-- 変数にnullを代入していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#nullassignment -->
        <exclude name="NullAssignment" />
        <!-- public boolean Object.equals(Object other)とpublic int Object.hashCode()の両方をオーバーライドするか、どちらもオーバーライドしないでください -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#overridebothequalsandhashcode -->
        <exclude name="OverrideBothEqualsAndHashcode" />
        <!-- オブジェクトclone()はsuper.clone()で実装されるべきです -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#propercloneimplementation -->
        <exclude name="ProperCloneImplementation" />
        <!-- ロガーはprivate static finalとして定義され、正しいクラスに関連付けられているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#properlogger -->
        <exclude name="ProperLogger" />
        <!-- 配列を返すメソッドでは、nullではなく空の配列を返しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#returnemptyarrayratherthannull -->
        <exclude name="ReturnEmptyArrayRatherThanNull" />
        <!-- finallyブロックから戻るような実装をしていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#returnfromfinallyblock -->
        <exclude name="ReturnFromFinallyBlock" />
        <!-- SimpleDateFormatインスタンスを作成するときは、必ずロケールを指定しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#simpledateformatneedslocale -->
        <exclude name="SimpleDateFormatNeedsLocale" />
        <!--オーバーロードされたgetInstanceを定義していないか-->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#singlemethodsingleton -->
        <exclude name="SingleMethodSingleton" />
        <!--オーバーロードされたgetInstanceを定義していないか-->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#singletonclassreturningnewinstance -->
        <exclude name="SingletonClassReturningNewInstance" />
        <!-- J2EEの仕様によると、EJBは書き込みアクセス権を持つ静的フィールドを持つべきではありません -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#staticejbfieldshouldbefinal -->
        <exclude name="StaticEJBFieldShouldBeFinal" />
        <!-- StringBufferのnew時にcharを指定していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#stringbufferinstantiationwithchar -->
        <exclude name="StringBufferInstantiationWithChar" />
        <!-- equalsというメソッド名を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#suspiciousequalsmethodname -->
        <exclude name="SuspiciousEqualsMethodName" />
        <!-- hashcodeというメソッド名を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#suspicioushashcodemethodname -->
        <exclude name="SuspiciousHashcodeMethodName" />
        <!-- 文字列のエスケープが正しく行われているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#suspiciousoctalescape -->
        <exclude name="SuspiciousOctalEscape" />
        <!-- テストクラスはTestという接尾辞で終わっているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#testclasswithouttestcases -->
        <exclude name="TestClassWithoutTestCases" />
        <!-- 条件が常に真または常に偽である「if」文を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#unconditionalifstatement -->
        <exclude name="UnconditionalIfStatement" />
        <!-- ブールリテラルを使用したJUnitテストアサーションは、常に同じものに評価されるため、不要です -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#unnecessarybooleanassertion -->
        <exclude name="UnnecessaryBooleanAssertion" />
        <!-- equalsIgnoreCase()を使用する方がtoUpperCase/toLowerCase()を使用するよりも速いです -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#unnecessarycasechange -->
        <exclude name="UnnecessaryCaseChange" />
        <!-- プリミティブを文字列に変換するときに一時オブジェクトを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#unnecessaryconversiontemporary -->
        <exclude name="UnnecessaryConversionTemporary" />
        <!-- オブジェクト参照のnullをチェックした後は、他のオブジェクトのequalsメソッドに渡すのではなく、そのオブジェクトに対してequalsを呼び出す必要があります -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#unusednullcheckinequals -->
        <exclude name="UnusedNullCheckInEquals" />
        <!-- エラーログ出力時に完全なスタックトレースが確実に出力されるような実装になっているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#usecorrectexceptionlogging -->
        <exclude name="UseCorrectExceptionLogging" />
        <!-- 文字列の比較にはequalsメソッドを使用しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#useequalstocomparestrings -->
        <exclude name="UseEqualsToCompareStrings" />
        <!-- 不変オブジェクト（String、BigDecimal、BigInteger）に対する操作では、操作の結果が新しいオブジェクトになるため、オブジェクト自体は変更されません -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#uselessoperationonimmutable -->
        <exclude name="UselessOperationOnImmutable" />
        <!-- String.toLowerCase()/toUpperCase()変換を実行するときは、ロケールを指定しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#uselocalewithcaseconversions -->
        <exclude name="UseLocaleWithCaseConversions" />
        <!-- getClassLoaderメソッドの代わりにThread.currentThread()またはgetContextClassLoader()を使用しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_errorprone.html#useproperclassloader -->
        <exclude name="UseProperClassLoader" />
    </rule>

    <!-- マルチスレッドに関する問題をチェックするルール -->
    <!-- https://pmd.github.io/latest/pmd_rules_java_multithreading.html -->
    <rule ref="category/java/multithreading.xml" >
        <!-- synchronizedによる同期方法が適切か -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel -->
        <exclude name="AvoidSynchronizedAtMethodLevel" />
        <!-- java.lang.ThreadGroupを使用していないか（スレッドセーフではないメソッドが含まれている） -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_multithreading.html#avoidthreadgroup -->
        <exclude name="AvoidThreadGroup" />
        <!-- volatileキーワードを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_multithreading.html#avoidusingvolatile -->
        <exclude name="AvoidUsingVolatile" />
        <!-- スレッドを明示的に使用していないか（J2EE仕様では、スレッドの使用を明示的に禁止しています） -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_multithreading.html#donotusethreads -->
        <exclude name="DoNotUseThreads" />
        <!-- Thread.runの代わりにThread.startを使用しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_multithreading.html#dontcallthreadrun -->
        <exclude name="DontCallThreadRun" />
        <!-- ダブルチェックロッキングパターンに関するチェック -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_multithreading.html#doublecheckedlocking -->
        <exclude name="DoubleCheckedLocking" />
        <!-- スレッドセーフではないシングルトンを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_multithreading.html#nonthreadsafesingleton -->
        <exclude name="NonThreadSafeSingleton" />

        <!-- Deprecated -->
        <!--<exclude name="UnsynchronizedStaticDateFormatter" />-->

        <!-- マルチスレッド時にMapを使用する場合、ConcurrentHashMapを使用しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_multithreading.html#useconcurrenthashmap -->
        <exclude name="UseConcurrentHashMap" />
        <!-- Thread.notifyよりもThread.notifyAllを使用した方が安全 -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_multithreading.html#usenotifyallinsteadofnotify -->
        <exclude name="UseNotifyAllInsteadOfNotify" />
    </rule>

    <!-- パフォーマンスに問題をチェックするルール -->
    <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html -->
    <rule ref="category/java/performance.xml" >
        <!-- 空の文字列と連結してリテラルを文字列に変換していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#addemptystring -->
        <exclude name="AddEmptyString" />
        <!-- StringBuffer/StringBuilder.appendメソッドで文字を文字列として連結していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#appendcharacterwithchar -->
        <exclude name="AppendCharacterWithChar" />
        <!-- 配列のコピーにArrays.copyOfまたはSystem.arraycopyメソッドを使用しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#avoidarrayloops -->
        <exclude name="AvoidArrayLoops" />
        <!-- FileInputStream and FileOutputStreamの使用時にガベージコレクションが一時停止するプログラムとなっていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#avoidfilestream -->
        <exclude name="AvoidFileStream" />
        <!-- ループ内でnewされたオブジェクトが外側で作成して再利用出来ないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#avoidinstantiatingobjectsinloops -->
        <exclude name="AvoidInstantiatingObjectsInLoops" />
        <!-- short型を使用して算術演算子を使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#avoidusingshorttype -->
        <exclude name="AvoidUsingShortType" />
        <!-- 既存のBigIntegerインスタンスを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#bigintegerinstantiation -->
        <exclude name="BigIntegerInstantiation" />
        <!-- Booleanオブジェクトをインスタンス化していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#booleaninstantiation -->
        <exclude name="BooleanInstantiation" />
        <!-- new Byteを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#byteinstantiation -->
        <exclude name="ByteInstantiation" />
        <!-- StringBufferのappendメソッドの使用方法が最適か -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#consecutiveappendsshouldreuse -->
        <exclude name="ConsecutiveAppendsShouldReuse" />
        <!-- StringBuilderのappendメソッドの使用方法が最適か -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#consecutiveliteralappends -->
        <exclude name="ConsecutiveLiteralAppends" />
        <!-- Stringの空白チェックが非効率ではないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#inefficientemptystringcheck -->
        <exclude name="InefficientEmptyStringCheck" />
        <!-- StringBufferの生成時に２つのバッファが同時に生成されていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#inefficientstringbuffering -->
        <exclude name="InefficientStringBuffering" />
        <!-- StringBufferまたはStringBuilderを適切にサイズ変更しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#insufficientstringbufferdeclaration -->
        <exclude name="InsufficientStringBufferDeclaration" />
        <!-- new Integerは使うな、わかったか？絶対にだ -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#integerinstantiation -->
        <exclude name="IntegerInstantiation" />
        <!-- new Longを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#longinstantiation -->
        <exclude name="LongInstantiation" />
        <!-- 非効率な配列の生成を行っていないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#optimizabletoarraycall -->
        <exclude name="OptimizableToArrayCall" />
        <!-- フィールドの初期化時に同じデフォルト値と同じ値で明示的に初期化していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#redundantfieldinitializer -->
        <exclude name="RedundantFieldInitializer" />
        <!-- new Shortを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#shortinstantiation -->
        <exclude name="ShortInstantiation" />
        <!-- String.startsWithの使用方法が最適か -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#simplifystartswith -->
        <exclude name="SimplifyStartsWith" />
        <!-- new Stringを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#stringinstantiation -->
        <exclude name="StringInstantiation" />
        <!-- 文字列インスタンスであることがすでにわかっているオブジェクトではtoStringを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#stringtostring -->
        <exclude name="StringToString" />
        <!-- 分岐が少数のケースでswitchを使用していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#toofewbranchesforaswitchstatement -->
        <exclude name="TooFewBranchesForASwitchStatement" />
        <!-- 値の生成方法が最適か -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#unnecessarywrapperobjectcreation -->
        <exclude name="UnnecessaryWrapperObjectCreation" />
        <!-- スレッドセーフな操作が不要な場合、VectorよりArrayListを使用しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#usearraylistinsteadofvector -->
        <exclude name="UseArrayListInsteadOfVector" />
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#usearraysaslist -->
        <!-- オブジェクトの配列から新しいListを作成するケースでasListメソッドを使用しているか -->
        <exclude name="UseArraysAsList" />
        <!-- 単一文字のインデックスをチェックするときはString.indexOf（char）を使用しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#useindexofchar -->
        <exclude name="UseIndexOfChar" />
        <!-- 文字列を追加するためにString.valueOfを呼び出していないか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#uselessstringvalueof -->
        <exclude name="UselessStringValueOf" />
        <!-- 文字列連結にStringBuilderを使用しているか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#usestringbufferforstringappends -->
        <exclude name="UseStringBufferForStringAppends" />
        <!-- StringBuffer.lengthを使用してStringBufferの長さをチェックしてるか -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_performance.html#usestringbufferlength -->
        <exclude name="UseStringBufferLength" />
    </rule>

    <!-- 潜在的なセキュリティ上の欠陥をチェックするルール。-->
    <!-- https://pmd.github.io/latest/pmd_rules_java_security.html -->
    <rule ref="category/java/security.xml" >
        <!-- 暗号化操作にハードコーディングされた値が使用されていないかチェック。ソースコードの外側にキーを保存してください。 -->
        <!-- https://pmd.github.io/latest/pmd_rules_java_security.html#hardcodedcryptokey -->
        <exclude name="HardCodedCryptoKey" />
        <!-- 暗号操作でハードコードされた初期値を使用されていないかチェック。ランダムに生成された値を使用してください。-->
        <!-- https://pmd.github.io/latest/pmd_rules_java_security.html#insecurecryptoiv -->
        <exclude name="InsecureCryptoIv" />
    </rule>

</ruleset>
